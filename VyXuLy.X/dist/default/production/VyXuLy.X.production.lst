

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sat Apr 24 12:06:31 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174                           
   175                           	psect	idataBANK0
   176  0193                     __pidataBANK0:
   177                           
   178                           ;initializer for _barriers_open
   179  0193  3401               	retlw	1
   180  0194  3400               	retlw	0
   181  000E                     _TMR1	set	14
   182  0006                     _PORTB	set	6
   183  0030                     _RB0	set	48
   184  0032                     _RB2	set	50
   185  0031                     _RB1	set	49
   186  0033                     _RB3	set	51
   187  0041                     _RD1	set	65
   188  0040                     _RD0	set	64
   189  0080                     _TMR1ON	set	128
   190  0085                     _T1CKPS1	set	133
   191  0084                     _T1CKPS0	set	132
   192  0081                     _TMR1CS	set	129
   193  005F                     _GIE	set	95
   194  005E                     _PEIE	set	94
   195  0060                     _TMR1IF	set	96
   196  0034                     _RB4	set	52
   197  0086                     _TRISB	set	134
   198  0088                     _TRISD	set	136
   199  0460                     _TMR1IE	set	1120
   200                           
   201                           	psect	cinit
   202  000F                     start_initialization:	
   203                           ; #config settings
   204                           
   205  000F                     __initialization:
   206                           
   207                           ; Initialize objects allocated to BANK0
   208  000F  120A  118A  2193  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   209  0014  00BE               	movwf	__pdataBANK0& (0+127)
   210  0015  120A  118A  2194  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   211  001A  00BF               	movwf	(__pdataBANK0+1)& (0+127)
   212                           
   213                           ; Clear objects allocated to BANK0
   214  001B  1383               	bcf	3,7	;select IRP bank0
   215  001C  3020               	movlw	low __pbssBANK0
   216  001D  0084               	movwf	4
   217  001E  303A               	movlw	low (__pbssBANK0+26)
   218  001F  120A  118A  218B  120A  118A  	fcall	clear_ram0
   219                           
   220                           ; Clear objects allocated to COMMON
   221  0024  01F0               	clrf	__pbssCOMMON& (0+127)
   222  0025  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   223  0026  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   224  0027  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   225  0028  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   226  0029                     end_of_initialization:	
   227                           ;End of C runtime variable initialization code
   228                           
   229  0029                     __end_of__initialization:
   230  0029  0183               	clrf	3
   231  002A  120A  118A  282D   	ljmp	_main	;jump to C main() function
   232                           
   233                           	psect	bssCOMMON
   234  0070                     __pbssCOMMON:
   235  0070                     _crossing_blocked:
   236  0070                     	ds	2
   237  0072                     _tick_blink:
   238  0072                     	ds	2
   239  0074                     _counter0:
   240  0074                     	ds	1
   241                           
   242                           	psect	bssBANK0
   243  0020                     __pbssBANK0:
   244  0020                     _millisPower:
   245  0020                     	ds	4
   246  0024                     _barriers_lowering:
   247  0024                     	ds	2
   248  0026                     _barriers_lifting:
   249  0026                     	ds	2
   250  0028                     _ext_comm_barriers:
   251  0028                     	ds	2
   252  002A                     _ext_comm_lamp:
   253  002A                     	ds	2
   254  002C                     _ext_comm_blinking:
   255  002C                     	ds	2
   256  002E                     _latch_s2:
   257  002E                     	ds	2
   258  0030                     _latch_s1:
   259  0030                     	ds	2
   260  0032                     _trigger_s2:
   261  0032                     	ds	2
   262  0034                     _trigger_s1:
   263  0034                     	ds	2
   264  0036                     _alarm_signals:
   265  0036                     	ds	2
   266  0038                     _stringComplete:
   267  0038                     	ds	2
   268                           
   269                           	psect	dataBANK0
   270  003E                     __pdataBANK0:
   271  003E                     _barriers_open:
   272  003E                     	ds	2
   273                           
   274                           	psect	clrtext
   275  018B                     clear_ram0:	
   276                           ;	Called with FSR containing the base address, and
   277                           ;	W with the last address+1
   278                           
   279  018B  0064               	clrwdt	;clear the watchdog before getting into this loop
   280  018C                     clrloop0:
   281  018C  0180               	clrf	0	;clear RAM location pointed to by FSR
   282  018D  0A84               	incf	4,f	;increment pointer
   283  018E  0604               	xorwf	4,w	;XOR with final address
   284  018F  1903               	btfsc	3,2	;have we reached the end yet?
   285  0190  3400               	retlw	0	;all done for this memory range, return
   286  0191  0604               	xorwf	4,w	;XOR again to restore value
   287  0192  298C               	goto	clrloop0	;do the next byte
   288                           
   289                           	psect	cstackCOMMON
   290  0075                     __pcstackCOMMON:
   291  0075                     ?_servoRotate0:
   292  0075                     ?_servoRotate90:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0075                     ?_main:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0075                     ?_ISR:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0075                     ??_ISR:	
   302                           ; 1 bytes @ 0x0
   303                           
   304                           
   305                           ; 1 bytes @ 0x0
   306  0075                     	ds	4
   307  0079                     ??_main:
   308                           
   309                           	psect	cstackBANK0
   310  003A                     __pcstackBANK0:	
   311                           ; 1 bytes @ 0x4
   312                           
   313  003A                     ??_servoRotate0:
   314  003A                     ??_servoRotate90:	
   315                           ; 1 bytes @ 0x0
   316                           
   317                           
   318                           ; 1 bytes @ 0x0
   319  003A                     	ds	2
   320  003C                     servoRotate0@i:
   321  003C                     servoRotate90@i:	
   322                           ; 2 bytes @ 0x2
   323                           
   324                           
   325                           ; 2 bytes @ 0x2
   326  003C                     	ds	2
   327                           
   328                           	psect	maintext
   329  002D                     __pmaintext:	
   330 ;;
   331 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   332 ;;
   333 ;; *************** function _main *****************
   334 ;; Defined at:
   335 ;;		line 70 in file "newmain.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;		None
   338 ;; Auto vars:     Size  Location     Type
   339 ;;		None
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, status,2, status,0, pclath, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : B00/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   349 ;;      Params:         0       0       0       0       0
   350 ;;      Locals:         0       0       0       0       0
   351 ;;      Temps:          0       0       0       0       0
   352 ;;      Totals:         0       0       0       0       0
   353 ;;Total ram usage:        0 bytes
   354 ;; Hardware stack levels required when called:    2
   355 ;; This function calls:
   356 ;;		_servoRotate0
   357 ;;		_servoRotate90
   358 ;; This function is called by:
   359 ;;		Startup code after reset
   360 ;; This function uses a non-reentrant model
   361 ;;
   362                           
   363                           
   364                           ;psect for function _main
   365  002D                     _main:
   366  002D                     l990:	
   367                           ;incstack = 0
   368                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   369                           
   370                           
   371                           ;newmain.c: 71:     TRISD = 0xFF;
   372  002D  30FF               	movlw	255
   373  002E  1683               	bsf	3,5	;RP0=1, select bank1
   374  002F  1303               	bcf	3,6	;RP1=0, select bank1
   375  0030  0088               	movwf	8	;volatile
   376  0031                     l992:
   377                           
   378                           ;newmain.c: 72:     TRISB = 0x00;
   379  0031  0186               	clrf	6	;volatile
   380  0032                     l994:
   381                           
   382                           ;newmain.c: 73:     PORTB = 0x00;
   383  0032  1283               	bcf	3,5	;RP0=0, select bank0
   384  0033  1303               	bcf	3,6	;RP1=0, select bank0
   385  0034  0186               	clrf	6	;volatile
   386  0035                     l996:
   387                           
   388                           ;newmain.c: 76:     TMR1IE = 1;
   389  0035  1683               	bsf	3,5	;RP0=1, select bank1
   390  0036  1303               	bcf	3,6	;RP1=0, select bank1
   391  0037  140C               	bsf	12,0	;volatile
   392  0038                     l998:
   393                           
   394                           ;newmain.c: 77:     TMR1IF = 0;
   395  0038  1283               	bcf	3,5	;RP0=0, select bank0
   396  0039  1303               	bcf	3,6	;RP1=0, select bank0
   397  003A  100C               	bcf	12,0	;volatile
   398  003B                     l1000:
   399                           
   400                           ;newmain.c: 78:     PEIE = 1;
   401  003B  170B               	bsf	11,6	;volatile
   402  003C                     l1002:
   403                           
   404                           ;newmain.c: 79:     GIE = 1;
   405  003C  178B               	bsf	11,7	;volatile
   406  003D                     l1004:
   407                           
   408                           ;newmain.c: 83:     TMR1 = 0;
   409  003D  018E               	clrf	14	;volatile
   410  003E  018F               	clrf	15	;volatile
   411  003F                     l1006:
   412                           
   413                           ;newmain.c: 85:     TMR1CS = 0;
   414  003F  1090               	bcf	16,1	;volatile
   415  0040                     l1008:
   416                           
   417                           ;newmain.c: 87:     T1CKPS0 = 0;
   418  0040  1210               	bcf	16,4	;volatile
   419  0041                     l1010:
   420                           
   421                           ;newmain.c: 88:     T1CKPS1 = 0;
   422  0041  1290               	bcf	16,5	;volatile
   423  0042                     l1012:
   424                           
   425                           ;newmain.c: 90:     servoRotate90();
   426  0042  120A  118A  212E  120A  118A  	fcall	_servoRotate90
   427  0047                     l1014:
   428                           
   429                           ;newmain.c: 93:     TMR1ON = 1;
   430  0047  1283               	bcf	3,5	;RP0=0, select bank0
   431  0048  1303               	bcf	3,6	;RP1=0, select bank0
   432  0049  1410               	bsf	16,0	;volatile
   433  004A                     l1016:
   434                           
   435                           ;newmain.c: 96:     {;newmain.c: 98:         if (RD0 == 1) {
   436  004A  1C08               	btfss	8,0	;volatile
   437  004B  284D               	goto	u551
   438  004C  284E               	goto	u550
   439  004D                     u551:
   440  004D  2857               	goto	l1020
   441  004E                     u550:
   442  004E                     l1018:
   443                           
   444                           ;newmain.c: 99:             trigger_s1 = 1;
   445  004E  3001               	movlw	1
   446  004F  00B4               	movwf	_trigger_s1
   447  0050  3000               	movlw	0
   448  0051  00B5               	movwf	_trigger_s1+1
   449                           
   450                           ;newmain.c: 100:             latch_s1 = 1;
   451  0052  3001               	movlw	1
   452  0053  00B0               	movwf	_latch_s1
   453  0054  3000               	movlw	0
   454  0055  00B1               	movwf	_latch_s1+1
   455                           
   456                           ;newmain.c: 101:         } else trigger_s1 = 0;
   457  0056  2859               	goto	l1022
   458  0057                     l1020:
   459  0057  01B4               	clrf	_trigger_s1
   460  0058  01B5               	clrf	_trigger_s1+1
   461  0059                     l1022:
   462                           
   463                           ;newmain.c: 103:         if (RD1 == 1) {
   464  0059  1C88               	btfss	8,1	;volatile
   465  005A  285C               	goto	u561
   466  005B  285D               	goto	u560
   467  005C                     u561:
   468  005C  2866               	goto	l1026
   469  005D                     u560:
   470  005D                     l1024:
   471                           
   472                           ;newmain.c: 104:             trigger_s2 = 1;
   473  005D  3001               	movlw	1
   474  005E  00B2               	movwf	_trigger_s2
   475  005F  3000               	movlw	0
   476  0060  00B3               	movwf	_trigger_s2+1
   477                           
   478                           ;newmain.c: 105:             latch_s2 = 1;
   479  0061  3001               	movlw	1
   480  0062  00AE               	movwf	_latch_s2
   481  0063  3000               	movlw	0
   482  0064  00AF               	movwf	_latch_s2+1
   483                           
   484                           ;newmain.c: 106:         } else trigger_s2 = 0;
   485  0065  2868               	goto	l1028
   486  0066                     l1026:
   487  0066  01B2               	clrf	_trigger_s2
   488  0067  01B3               	clrf	_trigger_s2+1
   489  0068                     l1028:
   490                           
   491                           ;newmain.c: 108:         if (latch_s1 && latch_s2 && !trigger_s1 && !trigger_s2) {
   492  0068  0830               	movf	_latch_s1,w
   493  0069  0431               	iorwf	_latch_s1+1,w
   494  006A  1903               	btfsc	3,2
   495  006B  286D               	goto	u571
   496  006C  286E               	goto	u570
   497  006D                     u571:
   498  006D  2884               	goto	l1038
   499  006E                     u570:
   500  006E                     l1030:
   501  006E  082E               	movf	_latch_s2,w
   502  006F  042F               	iorwf	_latch_s2+1,w
   503  0070  1903               	btfsc	3,2
   504  0071  2873               	goto	u581
   505  0072  2874               	goto	u580
   506  0073                     u581:
   507  0073  2884               	goto	l1038
   508  0074                     u580:
   509  0074                     l1032:
   510  0074  0834               	movf	_trigger_s1,w
   511  0075  0435               	iorwf	_trigger_s1+1,w
   512  0076  1D03               	btfss	3,2
   513  0077  2879               	goto	u591
   514  0078  287A               	goto	u590
   515  0079                     u591:
   516  0079  2884               	goto	l1038
   517  007A                     u590:
   518  007A                     l1034:
   519  007A  0832               	movf	_trigger_s2,w
   520  007B  0433               	iorwf	_trigger_s2+1,w
   521  007C  1D03               	btfss	3,2
   522  007D  287F               	goto	u601
   523  007E  2880               	goto	u600
   524  007F                     u601:
   525  007F  2884               	goto	l1038
   526  0080                     u600:
   527  0080                     l1036:
   528                           
   529                           ;newmain.c: 109:             latch_s1 = 0;
   530  0080  01B0               	clrf	_latch_s1
   531  0081  01B1               	clrf	_latch_s1+1
   532                           
   533                           ;newmain.c: 110:             latch_s2 = 0;
   534  0082  01AE               	clrf	_latch_s2
   535  0083  01AF               	clrf	_latch_s2+1
   536  0084                     l1038:
   537                           
   538                           ;newmain.c: 113:         if (latch_s1 || latch_s2) {
   539  0084  0830               	movf	_latch_s1,w
   540  0085  0431               	iorwf	_latch_s1+1,w
   541  0086  1D03               	btfss	3,2
   542  0087  2889               	goto	u611
   543  0088  288A               	goto	u610
   544  0089                     u611:
   545  0089  2890               	goto	l1042
   546  008A                     u610:
   547  008A                     l1040:
   548  008A  082E               	movf	_latch_s2,w
   549  008B  042F               	iorwf	_latch_s2+1,w
   550  008C  1903               	btfsc	3,2
   551  008D  288F               	goto	u621
   552  008E  2890               	goto	u620
   553  008F                     u621:
   554  008F  2896               	goto	l1046
   555  0090                     u620:
   556  0090                     l1042:
   557                           
   558                           ;newmain.c: 114:             crossing_blocked = 1;
   559  0090  3001               	movlw	1
   560  0091  00F0               	movwf	_crossing_blocked
   561  0092  3000               	movlw	0
   562  0093  00F1               	movwf	_crossing_blocked+1
   563  0094                     l1044:
   564                           
   565                           ;newmain.c: 115:             RB3 = 1;
   566  0094  1586               	bsf	6,3	;volatile
   567                           
   568                           ;newmain.c: 116:         } else {
   569  0095  2899               	goto	l1050
   570  0096                     l1046:
   571                           
   572                           ;newmain.c: 117:             crossing_blocked = 0;
   573  0096  01F0               	clrf	_crossing_blocked
   574  0097  01F1               	clrf	_crossing_blocked+1
   575  0098                     l1048:
   576                           
   577                           ;newmain.c: 118:             RB3 = 0;
   578  0098  1186               	bcf	6,3	;volatile
   579  0099                     l1050:
   580                           
   581                           ;newmain.c: 123:             if (barriers_open && crossing_blocked) barriers_lowering = 
      +                          1;
   582  0099  083E               	movf	_barriers_open,w
   583  009A  043F               	iorwf	_barriers_open+1,w
   584  009B  1903               	btfsc	3,2
   585  009C  289E               	goto	u631
   586  009D  289F               	goto	u630
   587  009E                     u631:
   588  009E  28A9               	goto	l1056
   589  009F                     u630:
   590  009F                     l1052:
   591  009F  0870               	movf	_crossing_blocked,w
   592  00A0  0471               	iorwf	_crossing_blocked+1,w
   593  00A1  1903               	btfsc	3,2
   594  00A2  28A4               	goto	u641
   595  00A3  28A5               	goto	u640
   596  00A4                     u641:
   597  00A4  28A9               	goto	l1056
   598  00A5                     u640:
   599  00A5                     l1054:
   600  00A5  3001               	movlw	1
   601  00A6  00A4               	movwf	_barriers_lowering
   602  00A7  3000               	movlw	0
   603  00A8  00A5               	movwf	_barriers_lowering+1
   604  00A9                     l1056:
   605                           
   606                           ;newmain.c: 124:             if (!barriers_open && !crossing_blocked) barriers_lifting =
      +                           1;
   607  00A9  083E               	movf	_barriers_open,w
   608  00AA  043F               	iorwf	_barriers_open+1,w
   609  00AB  1D03               	btfss	3,2
   610  00AC  28AE               	goto	u651
   611  00AD  28AF               	goto	u650
   612  00AE                     u651:
   613  00AE  28B9               	goto	l1062
   614  00AF                     u650:
   615  00AF                     l1058:
   616  00AF  0870               	movf	_crossing_blocked,w
   617  00B0  0471               	iorwf	_crossing_blocked+1,w
   618  00B1  1D03               	btfss	3,2
   619  00B2  28B4               	goto	u661
   620  00B3  28B5               	goto	u660
   621  00B4                     u661:
   622  00B4  28B9               	goto	l1062
   623  00B5                     u660:
   624  00B5                     l1060:
   625  00B5  3001               	movlw	1
   626  00B6  00A6               	movwf	_barriers_lifting
   627  00B7  3000               	movlw	0
   628  00B8  00A7               	movwf	_barriers_lifting+1
   629  00B9                     l1062:
   630                           
   631                           ;newmain.c: 128:         if (barriers_lifting) {
   632  00B9  0826               	movf	_barriers_lifting,w
   633  00BA  0427               	iorwf	_barriers_lifting+1,w
   634  00BB  1903               	btfsc	3,2
   635  00BC  28BE               	goto	u671
   636  00BD  28BF               	goto	u670
   637  00BE                     u671:
   638  00BE  28CE               	goto	l1074
   639  00BF                     u670:
   640  00BF                     l1064:
   641                           
   642                           ;newmain.c: 129:             servoRotate90();
   643  00BF  120A  118A  212E  120A  118A  	fcall	_servoRotate90
   644  00C4                     l1066:
   645                           
   646                           ;newmain.c: 130:             barriers_lifting = 0;
   647  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   648  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   649  00C6  01A6               	clrf	_barriers_lifting
   650  00C7  01A7               	clrf	_barriers_lifting+1
   651  00C8                     l1068:
   652                           
   653                           ;newmain.c: 131:             barriers_open = 1;
   654  00C8  3001               	movlw	1
   655  00C9  00BE               	movwf	_barriers_open
   656  00CA  3000               	movlw	0
   657  00CB  00BF               	movwf	_barriers_open+1
   658  00CC                     l1070:
   659                           
   660                           ;newmain.c: 132:             RB1 = 0;
   661  00CC  1086               	bcf	6,1	;volatile
   662  00CD                     l1072:
   663                           
   664                           ;newmain.c: 133:             RB2 = 0;
   665  00CD  1106               	bcf	6,2	;volatile
   666  00CE                     l1074:
   667                           
   668                           ;newmain.c: 136:         if (barriers_lowering) {
   669  00CE  0824               	movf	_barriers_lowering,w
   670  00CF  0425               	iorwf	_barriers_lowering+1,w
   671  00D0  1903               	btfsc	3,2
   672  00D1  28D3               	goto	u681
   673  00D2  28D4               	goto	u680
   674  00D3                     u681:
   675  00D3  284A               	goto	l1016
   676  00D4                     u680:
   677  00D4                     l1076:
   678                           
   679                           ;newmain.c: 137:             servoRotate0();
   680  00D4  120A  118A  215E  120A  118A  	fcall	_servoRotate0
   681  00D9                     l1078:
   682                           
   683                           ;newmain.c: 138:             barriers_lowering = 0;
   684  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   685  00DA  1303               	bcf	3,6	;RP1=0, select bank0
   686  00DB  01A4               	clrf	_barriers_lowering
   687  00DC  01A5               	clrf	_barriers_lowering+1
   688  00DD                     l1080:
   689                           
   690                           ;newmain.c: 139:             barriers_open = 0;
   691  00DD  01BE               	clrf	_barriers_open
   692  00DE  01BF               	clrf	_barriers_open+1
   693  00DF  284A               	goto	l1016
   694  00E0  120A  118A  280C   	ljmp	start
   695  00E3                     __end_of_main:
   696                           
   697                           	psect	text1
   698  012E                     __ptext1:	
   699 ;; *************** function _servoRotate90 *****************
   700 ;; Defined at:
   701 ;;		line 57 in file "newmain.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  i               2    2[BANK0 ] unsigned int 
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   715 ;;      Params:         0       0       0       0       0
   716 ;;      Locals:         0       2       0       0       0
   717 ;;      Temps:          0       2       0       0       0
   718 ;;      Totals:         0       4       0       0       0
   719 ;;Total ram usage:        4 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; Hardware stack levels required when called:    1
   722 ;; This function calls:
   723 ;;		Nothing
   724 ;; This function is called by:
   725 ;;		_main
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           
   730                           ;psect for function _servoRotate90
   731  012E                     _servoRotate90:
   732  012E                     l980:	
   733                           ;incstack = 0
   734                           ; Regs used in _servoRotate90: [wreg+status,2]
   735                           
   736                           
   737                           ;newmain.c: 59:   unsigned int i;;newmain.c: 60:   for(i=0;i<50;i++)
   738  012E  1283               	bcf	3,5	;RP0=0, select bank0
   739  012F  1303               	bcf	3,6	;RP1=0, select bank0
   740  0130  01BC               	clrf	servoRotate90@i
   741  0131  01BD               	clrf	servoRotate90@i+1
   742  0132                     l80:
   743                           
   744                           ;newmain.c: 61:   {;newmain.c: 62:     RB4 = 1;
   745  0132  1606               	bsf	6,4	;volatile
   746  0133                     l986:
   747                           
   748                           ;newmain.c: 63:     _delay((unsigned long)((1500)*(4000000/4000000.0)));
   749  0133  30D5               	movlw	213
   750  0134  1283               	bcf	3,5	;RP0=0, select bank0
   751  0135  1303               	bcf	3,6	;RP1=0, select bank0
   752  0136  00BA               	movwf	??_servoRotate90
   753  0137                     u697:
   754  0137  2938               	nop2
   755  0138  2939               	nop2
   756  0139  0BBA               	decfsz	??_servoRotate90,f
   757  013A  2937               	goto	u697
   758  013B  293C               	nop2
   759  013C  293D               	nop2
   760  013D  293E               	nop2
   761  013E                     l988:
   762                           
   763                           ;newmain.c: 64:     RB4 = 0;
   764  013E  1283               	bcf	3,5	;RP0=0, select bank0
   765  013F  1303               	bcf	3,6	;RP1=0, select bank0
   766  0140  1206               	bcf	6,4	;volatile
   767                           
   768                           ;newmain.c: 65:     _delay((unsigned long)((18500)*(4000000/4000000.0)));
   769  0141  3019               	movlw	25
   770  0142  1283               	bcf	3,5	;RP0=0, select bank0
   771  0143  1303               	bcf	3,6	;RP1=0, select bank0
   772  0144  00BB               	movwf	??_servoRotate90+1
   773  0145  3004               	movlw	4
   774  0146  00BA               	movwf	??_servoRotate90
   775  0147                     u707:
   776  0147  0BBA               	decfsz	??_servoRotate90,f
   777  0148  2947               	goto	u707
   778  0149  0BBB               	decfsz	??_servoRotate90+1,f
   779  014A  2947               	goto	u707
   780  014B  0000               	nop
   781                           
   782                           ;newmain.c: 66:   }
   783  014C  3001               	movlw	1
   784  014D  1283               	bcf	3,5	;RP0=0, select bank0
   785  014E  1303               	bcf	3,6	;RP1=0, select bank0
   786  014F  07BC               	addwf	servoRotate90@i,f
   787  0150  1803               	skipnc
   788  0151  0ABD               	incf	servoRotate90@i+1,f
   789  0152  3000               	movlw	0
   790  0153  07BD               	addwf	servoRotate90@i+1,f
   791  0154  3000               	movlw	0
   792  0155  023D               	subwf	servoRotate90@i+1,w
   793  0156  3032               	movlw	50
   794  0157  1903               	skipnz
   795  0158  023C               	subwf	servoRotate90@i,w
   796  0159  1C03               	skipc
   797  015A  295C               	goto	u541
   798  015B  295D               	goto	u540
   799  015C                     u541:
   800  015C  2932               	goto	l80
   801  015D                     u540:
   802  015D                     l82:
   803  015D  0008               	return
   804  015E                     __end_of_servoRotate90:
   805                           
   806                           	psect	text2
   807  015E                     __ptext2:	
   808 ;; *************** function _servoRotate0 *****************
   809 ;; Defined at:
   810 ;;		line 45 in file "newmain.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  i               2    2[BANK0 ] unsigned int 
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, status,2
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   824 ;;      Params:         0       0       0       0       0
   825 ;;      Locals:         0       2       0       0       0
   826 ;;      Temps:          0       2       0       0       0
   827 ;;      Totals:         0       4       0       0       0
   828 ;;Total ram usage:        4 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    1
   831 ;; This function calls:
   832 ;;		Nothing
   833 ;; This function is called by:
   834 ;;		_main
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           
   839                           ;psect for function _servoRotate0
   840  015E                     _servoRotate0:
   841  015E                     l970:	
   842                           ;incstack = 0
   843                           ; Regs used in _servoRotate0: [wreg+status,2]
   844                           
   845                           
   846                           ;newmain.c: 47:   unsigned int i;;newmain.c: 48:   for(i=0;i<50;i++)
   847  015E  1283               	bcf	3,5	;RP0=0, select bank0
   848  015F  1303               	bcf	3,6	;RP1=0, select bank0
   849  0160  01BC               	clrf	servoRotate0@i
   850  0161  01BD               	clrf	servoRotate0@i+1
   851  0162                     l75:
   852                           
   853                           ;newmain.c: 49:   {;newmain.c: 50:     RB4 = 1;
   854  0162  1606               	bsf	6,4	;volatile
   855  0163                     l976:
   856                           
   857                           ;newmain.c: 51:     _delay((unsigned long)((800)*(4000000/4000000.0)));
   858  0163  309F               	movlw	159
   859  0164  1283               	bcf	3,5	;RP0=0, select bank0
   860  0165  1303               	bcf	3,6	;RP1=0, select bank0
   861  0166  00BA               	movwf	??_servoRotate0
   862  0167                     u717:
   863  0167  2968               	nop2
   864  0168  0BBA               	decfsz	??_servoRotate0,f
   865  0169  2967               	goto	u717
   866  016A  296B               	nop2
   867  016B                     l978:
   868                           
   869                           ;newmain.c: 52:     RB4 = 0;
   870  016B  1283               	bcf	3,5	;RP0=0, select bank0
   871  016C  1303               	bcf	3,6	;RP1=0, select bank0
   872  016D  1206               	bcf	6,4	;volatile
   873                           
   874                           ;newmain.c: 53:     _delay((unsigned long)((19200)*(4000000/4000000.0)));
   875  016E  3019               	movlw	25
   876  016F  1283               	bcf	3,5	;RP0=0, select bank0
   877  0170  1303               	bcf	3,6	;RP1=0, select bank0
   878  0171  00BB               	movwf	??_servoRotate0+1
   879  0172  30ED               	movlw	237
   880  0173  00BA               	movwf	??_servoRotate0
   881  0174                     u727:
   882  0174  0BBA               	decfsz	??_servoRotate0,f
   883  0175  2974               	goto	u727
   884  0176  0BBB               	decfsz	??_servoRotate0+1,f
   885  0177  2974               	goto	u727
   886  0178  2979               	nop2
   887                           
   888                           ;newmain.c: 54:   }
   889  0179  3001               	movlw	1
   890  017A  1283               	bcf	3,5	;RP0=0, select bank0
   891  017B  1303               	bcf	3,6	;RP1=0, select bank0
   892  017C  07BC               	addwf	servoRotate0@i,f
   893  017D  1803               	skipnc
   894  017E  0ABD               	incf	servoRotate0@i+1,f
   895  017F  3000               	movlw	0
   896  0180  07BD               	addwf	servoRotate0@i+1,f
   897  0181  3000               	movlw	0
   898  0182  023D               	subwf	servoRotate0@i+1,w
   899  0183  3032               	movlw	50
   900  0184  1903               	skipnz
   901  0185  023C               	subwf	servoRotate0@i,w
   902  0186  1C03               	skipc
   903  0187  2989               	goto	u531
   904  0188  298A               	goto	u530
   905  0189                     u531:
   906  0189  2962               	goto	l75
   907  018A                     u530:
   908  018A                     l77:
   909  018A  0008               	return
   910  018B                     __end_of_servoRotate0:
   911                           
   912                           	psect	text3
   913  00E3                     __ptext3:	
   914 ;; *************** function _ISR *****************
   915 ;; Defined at:
   916 ;;		line 158 in file "newmain.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;		None
   921 ;; Return value:  Size  Location     Type
   922 ;;                  1    wreg      void 
   923 ;; Registers used:
   924 ;;		wreg, status,2, status,0
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   930 ;;      Params:         0       0       0       0       0
   931 ;;      Locals:         0       0       0       0       0
   932 ;;      Temps:          4       0       0       0       0
   933 ;;      Totals:         4       0       0       0       0
   934 ;;Total ram usage:        4 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		Interrupt level 1
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           
   944                           ;psect for function _ISR
   945  00E3                     _ISR:
   946  00E3                     i1l950:
   947                           
   948                           ;newmain.c: 159:     if(TMR1IF == 1){
   949  00E3  1283               	bcf	3,5	;RP0=0, select bank0
   950  00E4  1303               	bcf	3,6	;RP1=0, select bank0
   951  00E5  1C0C               	btfss	12,0	;volatile
   952  00E6  28E8               	goto	u43_21
   953  00E7  28E9               	goto	u43_20
   954  00E8                     u43_21:
   955  00E8  2927               	goto	i1l114
   956  00E9                     u43_20:
   957  00E9                     i1l952:
   958                           
   959                           ;newmain.c: 161:         if (ext_comm_blinking || crossing_blocked) {
   960  00E9  082C               	movf	_ext_comm_blinking,w
   961  00EA  042D               	iorwf	_ext_comm_blinking+1,w
   962  00EB  1D03               	btfss	3,2
   963  00EC  28EE               	goto	u44_21
   964  00ED  28EF               	goto	u44_20
   965  00EE                     u44_21:
   966  00EE  28F5               	goto	i1l956
   967  00EF                     u44_20:
   968  00EF                     i1l954:
   969  00EF  0870               	movf	_crossing_blocked,w
   970  00F0  0471               	iorwf	_crossing_blocked+1,w
   971  00F1  1903               	btfsc	3,2
   972  00F2  28F4               	goto	u45_21
   973  00F3  28F5               	goto	u45_20
   974  00F4                     u45_21:
   975  00F4  2926               	goto	i1l968
   976  00F5                     u45_20:
   977  00F5                     i1l956:
   978                           
   979                           ;newmain.c: 162:             counter0++;
   980  00F5  3001               	movlw	1
   981  00F6  00F5               	movwf	??_ISR
   982  00F7  0875               	movf	??_ISR,w
   983  00F8  07F4               	addwf	_counter0,f
   984                           
   985                           ;newmain.c: 163:             if (counter0 == 8) {
   986  00F9  3008               	movlw	8
   987  00FA  0674               	xorwf	_counter0,w
   988  00FB  1D03               	btfss	3,2
   989  00FC  28FE               	goto	u46_21
   990  00FD  28FF               	goto	u46_20
   991  00FE                     u46_21:
   992  00FE  2910               	goto	i1l964
   993  00FF                     u46_20:
   994  00FF                     i1l958:
   995                           
   996                           ;newmain.c: 164:                 RB0 = ~RB0;
   997  00FF  3001               	movlw	1
   998  0100  0686               	xorwf	6,f
   999  0101                     i1l960:
  1000                           
  1001                           ;newmain.c: 165:                 tick_blink = !tick_blink;
  1002  0101  0872               	movf	_tick_blink,w
  1003  0102  0473               	iorwf	_tick_blink+1,w
  1004  0103  1903               	btfsc	3,2
  1005  0104  2906               	goto	u47_21
  1006  0105  2908               	goto	u47_20
  1007  0106                     u47_21:
  1008  0106  3001               	movlw	1
  1009  0107  2909               	goto	u48_20
  1010  0108                     u47_20:
  1011  0108  3000               	movlw	0
  1012  0109                     u48_20:
  1013  0109  00F5               	movwf	??_ISR
  1014  010A  01F6               	clrf	??_ISR+1
  1015  010B  0875               	movf	??_ISR,w
  1016  010C  00F2               	movwf	_tick_blink
  1017  010D  0876               	movf	??_ISR+1,w
  1018  010E  00F3               	movwf	_tick_blink+1
  1019  010F                     i1l962:
  1020                           
  1021                           ;newmain.c: 166:                 counter0 = 0;
  1022  010F  01F4               	clrf	_counter0
  1023  0110                     i1l964:
  1024                           
  1025                           ;newmain.c: 168:             RB1 = tick_blink;
  1026  0110  1872               	btfsc	_tick_blink,0
  1027  0111  2913               	goto	u49_21
  1028  0112  2917               	goto	u49_20
  1029  0113                     u49_21:
  1030  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1032  0115  1486               	bsf	6,1	;volatile
  1033  0116  291A               	goto	u50_24
  1034  0117                     u49_20:
  1035  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0118  1303               	bcf	3,6	;RP1=0, select bank0
  1037  0119  1086               	bcf	6,1	;volatile
  1038  011A                     u50_24:
  1039  011A                     i1l966:
  1040                           
  1041                           ;newmain.c: 169:             RB2 = !tick_blink;
  1042  011A  0872               	movf	_tick_blink,w
  1043  011B  0473               	iorwf	_tick_blink+1,w
  1044  011C  1903               	btfsc	3,2
  1045  011D  291F               	goto	u51_21
  1046  011E  2923               	goto	u51_20
  1047  011F                     u51_21:
  1048  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1049  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1050  0121  1506               	bsf	6,2	;volatile
  1051  0122  2926               	goto	u52_24
  1052  0123                     u51_20:
  1053  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0125  1106               	bcf	6,2	;volatile
  1056  0126                     u52_24:
  1057  0126                     i1l968:
  1058                           
  1059                           ;newmain.c: 171:         TMR1IF = 0;
  1060  0126  100C               	bcf	12,0	;volatile
  1061  0127                     i1l114:
  1062  0127  0878               	movf	??_ISR+3,w
  1063  0128  008A               	movwf	10
  1064  0129  0E77               	swapf	??_ISR+2,w
  1065  012A  0083               	movwf	3
  1066  012B  0EFE               	swapf	btemp,f
  1067  012C  0E7E               	swapf	btemp,w
  1068  012D  0009               	retfie
  1069  012E                     __end_of_ISR:
  1070  007E                     btemp	set	126	;btemp
  1071  007E                     wtemp0	set	126
  1072                           
  1073                           	psect	intentry
  1074  0004                     __pintentry:	
  1075                           ;incstack = 0
  1076                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1077                           
  1078  0004                     interrupt_function:
  1079  007E                     saved_w	set	btemp
  1080  0004  00FE               	movwf	btemp
  1081  0005  0E03               	swapf	3,w
  1082  0006  00F7               	movwf	??_ISR+2
  1083  0007  080A               	movf	10,w
  1084  0008  00F8               	movwf	??_ISR+3
  1085  0009  120A  118A  28E3   	ljmp	_ISR
  1086                           
  1087                           	psect	config
  1088                           
  1089                           ;Config register CONFIG @ 0x2007
  1090                           ;	Oscillator Selection bits
  1091                           ;	FOSC = XT, XT oscillator
  1092                           ;	Watchdog Timer Enable bit
  1093                           ;	WDTE = OFF, WDT disabled
  1094                           ;	Power-up Timer Enable bit
  1095                           ;	PWRTE = ON, PWRT enabled
  1096                           ;	Brown-out Reset Enable bit
  1097                           ;	BOREN = ON, BOR enabled
  1098                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1099                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1100                           ;	Data EEPROM Memory Code Protection bit
  1101                           ;	CPD = OFF, Data EEPROM code protection off
  1102                           ;	Flash Program Memory Write Enable bits
  1103                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1104                           ;	In-Circuit Debugger Mode bit
  1105                           ;	DEBUG = 0x1, unprogrammed default
  1106                           ;	Flash Program Memory Code Protection bit
  1107                           ;	CP = OFF, Code protection off
  1108  2007                     	org	8199
  1109  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       9
    BANK0            80      4      32
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_servoRotate0
    _main->_servoRotate90

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     136
                       _servoRotate0
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (1) _servoRotate90                                        4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _servoRotate0                                         4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _servoRotate0
   _servoRotate90

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      4      20       5       40.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      4       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      29      12        0.0%
ABS                  0      0      29       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sat Apr 24 12:06:31 2021

                     l80 0132                       l82 015D                       l75 0162  
                     l77 018A                       fsr 0004            servoRotate0@i 003C  
                    l970 015E                      l980 012E                      l990 002D  
                    l976 0163                      l992 0031                      l978 016B  
                    l986 0133                      l994 0032                      _GIE 005F  
                    l988 013E                      l996 0035                      l998 0038  
                    _RB0 0030                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RB4 0034                      _RD0 0040  
                    _RD1 0041                      u600 0080                      u601 007F  
                    u530 018A                      u610 008A                      u531 0189  
                    u611 0089                      u540 015D                      u620 0090  
                    _ISR 00E3                      u541 015C                      u621 008F  
                    u630 009F                      u550 004E                      u631 009E  
                    u551 004D                      u640 00A5                      u560 005D  
                    u641 00A4                      u561 005C                      u650 00AF  
                    u570 006E                      u707 0147                      u651 00AE  
                    u571 006D                      u660 00B5                      u580 0074  
                    u717 0167                      u661 00B4                      u581 0073  
                    u670 00BF                      u590 007A                      u727 0174  
                    u671 00BE                      u591 0079                      u680 00D4  
                    u681 00D3                      u697 0137                      indf 0000  
         servoRotate90@i 003C                     ?_ISR 0075                     l1000 003B  
                   l1010 0041                     l1002 003C                     l1020 0057  
                   l1012 0042                     l1004 003D                     l1030 006E  
                   l1022 0059                     l1014 0047                     l1006 003F  
                   l1040 008A                     l1032 0074                     l1024 005D  
                   l1016 004A                     l1008 0040                     l1050 0099  
                   l1042 0090                     l1034 007A                     l1026 0066  
                   l1018 004E                     l1060 00B5                     l1052 009F  
                   l1044 0094                     l1036 0080                     l1028 0068  
                   l1070 00CC                     l1062 00B9                     l1054 00A5  
                   l1046 0096                     l1038 0084                     l1080 00DD  
                   l1072 00CD                     l1064 00BF                     l1056 00A9  
                   l1048 0098                     l1066 00C4                     l1074 00CE  
                   l1058 00AF                     l1076 00D4                     l1068 00C8  
                   l1078 00D9                     _PEIE 005E                     _TMR1 000E  
                   _main 002D                     btemp 007E                     start 000C  
        ??_servoRotate90 003A                    ??_ISR 0075                    ?_main 0075  
                  i1l114 0127                    i1l950 00E3                    i1l960 0101  
                  i1l952 00E9                    i1l962 010F                    i1l954 00EF  
                  i1l964 0110                    i1l956 00F5                    i1l966 011A  
                  i1l958 00FF                    i1l968 0126                    u50_24 011A  
                  u51_20 0123                    u43_20 00E9                    u51_21 011F  
                  u43_21 00E8                    _PORTB 0006                    u44_20 00EF  
                  u44_21 00EE                    u52_24 0126                    u45_20 00F5  
                  u45_21 00F4                    u46_20 00FF                    u46_21 00FE  
                  u47_20 0108                    u47_21 0106                    u48_20 0109  
                  u49_20 0117                    u49_21 0113                    _TRISB 0086  
                  _TRISD 0088                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 00E3  
                 ??_main 0079        _barriers_lowering 0024                   _TMR1IE 0460  
                 _TMR1IF 0060                   _TMR1CS 0081                   _TMR1ON 0080  
                 saved_w 007E  __end_of__initialization 0029           __pcstackCOMMON 0075  
           __pidataBANK0 0193               __pbssBANK0 0020               __pmaintext 002D  
             __pintentry 0004                  _T1CKPS0 0084                  _T1CKPS1 0085  
  __end_of_servoRotate90 015E            _ext_comm_lamp 002A                  __ptext1 012E  
                __ptext2 015E                  __ptext3 00E3             __size_of_ISR 004B  
                clrloop0 018C     end_of_initialization 0029               _tick_blink 0072  
          ?_servoRotate0 0075               _trigger_s1 0034               _trigger_s2 0032  
         ??_servoRotate0 003A           _stringComplete 0038      start_initialization 000F  
            __end_of_ISR 012E            _barriers_open 003E         _barriers_lifting 0026  
          _alarm_signals 0036        _ext_comm_barriers 0028        _ext_comm_blinking 002C  
            __pdataBANK0 003E              __pbssCOMMON 0070                ___latbits 0002  
          __pcstackBANK0 003A         _crossing_blocked 0070     __end_of_servoRotate0 018B  
      interrupt_function 0004                clear_ram0 018B   __size_of_servoRotate90 0030  
               _latch_s1 0030                 _latch_s2 002E                 _counter0 0074  
          __size_of_main 00B6              _millisPower 0020            _servoRotate90 012E  
  __size_of_servoRotate0 002D                 intlevel1 0000           ?_servoRotate90 0075  
           _servoRotate0 015E  
